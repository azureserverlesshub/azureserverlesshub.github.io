{"/applications/":{"data":{"":"ðŸ‘‹ Hello! Welcome to the Sample Applications Root!"},"title":"Documentation"},"/eda/":{"data":{"":" Getting StartedLearn about what EDA means and what are the services you can use in Azure. VisualizationsExplore and learn event-driven architecture through small bite sized visualizations with extra resources to dive deep. DocumentationLearn how you can use EventCatalog \u0026 AsyncApi, open source tool to help you document your event-driven architectures today. "},"title":"EDA"},"/eda/documentation/":{"data":{"":"Work In Progress!"},"title":"_index"},"/eda/getting-started/":{"data":{"":"","what-are-event-driven-architectures-#What are Event Driven Architectures ?":"","what-serverless-services-can-you-use-to-build-event-driven-architectures#What serverless services can you use to build event-driven architectures?":"\rWhat are Event Driven Architectures ?\rEvent-driven architectures are a design paradigm that employs events and asynchronous communication to loosely couple an applicationâ€™s components. These architectures can enhance agility and aid in the construction of reliable, scalable applications.\nServerless services such as Azure Event Grid, Azure Logic Apps,Azure Container Apps, Azure Service Bus, Azure Event Hubs, and Azure Functions align naturally with event-driven architectures - they are triggered by events, emit events, and possess inherent capabilities for building with events.\nThis guide introduces you with event-driven architectures. Comprehend the patterns within event-driven architectures and the Azure services that are frequently used to implement them. Learn best practices for constructing event-driven architectures, from designing event schemas to managing idempotency. Discover resources to get started with building event-driven architectures on Azure.\nWhat serverless services can you use to build event-driven architectures?\rIcon-compute-29\rAzure Functions\rAzure Functions is a serverless solution that allows you to write less code, maintain less infrastructure, and save on costs. Instead of worrying about deploying and maintaining servers, the cloud infrastructure provides all the up-to-date resources needed to keep your applications running.\nPatternsLearn More\rAzure Logic Apps\rAzure Logic Apps is a cloud platform where you can create and run automated workflows with little to no code. By using the visual designer and selecting from prebuilt operations, you can quickly build a workflow that integrates and manages your apps, data, services, and systems.\nPatternsLearn More\rAzure Container Apps\rAzure Container Apps is a serverless platform that allows you to maintain less infrastructure and save costs while running containerized applications. Instead of worrying about server configuration, container orchestration, and deployment details, Container Apps provides all the up-to-date server resources required to keep your applications stable and secure.\nPatternsLearn More\rAzure Service Bus\rAzure Service Bus, a fully managed enterprise message broker, facilitates communication between applications and services. It achieves this by decoupling them, offering benefits such as load balancing work across competing workers, secure data routing across service \u0026 application boundaries, and reliable coordination for transactional work that requires a high-degree of reliability\nPatternsLearn More"},"title":"_index"},"/eda/visuals/":{"data":{"":"Small bite sized visuals about event-driven architectures.\nDesigns and random thoughts from @boyney123 and recreated by @ankt_srkr whereever needed.\nWhat are events?Bite sized visuals to help you understand events\rProducer and consumer responsibilitiesSet clear responsibility for producers \u0026 consumers"},"title":"_index"},"/eda/visuals/producer-consumer-responsibilities/":{"data":{"":"When building event-driven applications itâ€™s important to know the responsibility of the consumer and producer.\nProducer and Consumer Responsibilities\rUse this diagram as a base, but you may want to adapt it based on your architecture."},"title":"Producer and consumer responsibilities"},"/eda/visuals/what-are-events/":{"data":{"":"","#":"\rEvents may seem simple, raise something and react somewhere, but as you dive deeper into event-driven architecture and start building solutions you soon realise that there is much more to events that you initially thought.\nEvents in Event Driven Architecture\rUnderstanding the core concepts, event types and exploring integration patterns with events can really help you understand events at a deeper level, which can help you when building event-driven solutions.\nImmutable Facts\rEvents are immutable facts. Things that have happened that cannot be undone or changed.\nEvents are great a representing real-life scenarios. Events happen all the time, everywhere. The time you played that song, took the bin out, ordered something online, cooked food, at most situations events are happening.\nEvent Types\rWhen you start, you may just be publishing any kind of event without much thought. This works initially but can lead you to problems with inconsistent events, poor event design, migration and much more.\nEvents come in many different sizes and patterns, many developers building event-driven solutions use various different event types based on their use case.\nExamples of these are notification events (keeping contracts simple), event-carried state transfer (putting more information into the events), domain events(events representing your domain), delta events (events that give the difference between old and new), and many moreâ€¦\nUnderstanding these event types can help, and there are more resources below to dive deeper.\nIntegration Patterns\rIntegration patterns give us ways in which we can interact, consume and manipulate information before consumers get it.\nAnti-corruption layer (ALC) is a popular pattern that engineers use to map consumed events into events/models that the consuming domain understands. For example consuming an OrderPlaced event within the Payment domain, the payment domain may want to map this event into a structure/schema that the payment domain understands.\nEnrichment allows events to be enriched with information before downstream consumers consume them. This pattern allows producers to raise simple events, and consumers get information they may require even if it is not on the original event.\nConformist pattern is when consumers conform to events as they are. No enrichment, no mapping, nothing. They take the event and consume it. This can be great for domains that life close together, but be careful not to conform to implementation details exposed in events.\nEnterprise Integration Patterns is a great resource to dive deeper into messaging integration patterns. Worth reading and re-reading."},"title":"What are events?"},"/patterns/":{"data":{"":"ðŸ‘‹ Hello! Welcome to the Patterns Root!"},"title":"Documentation"},"/resources/":{"data":{"":"ðŸ‘‹ Hello! Welcome to the Resources Root!"},"title":"Documentation"},"/snippets/":{"data":{"":"ðŸ‘‹ Hello! Welcome to the Snippets Root!"},"title":"Documentation"}}